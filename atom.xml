<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodeBlocQ</title>
  
  
  <link href="http://www.codeblocq.com/atom.xml" rel="self"/>
  
  <link href="http://www.codeblocq.com/"/>
  <updated>2020-10-05T10:15:09.514Z</updated>
  <id>http://www.codeblocq.com/</id>
  
  <author>
    <name>Jonathan Klughertz</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Have Mobx and React work with TypeScript</title>
    <link href="http://www.codeblocq.com/2020/10/Have-Mobx-and-React-work-with-Typescript/"/>
    <id>http://www.codeblocq.com/2020/10/Have-Mobx-and-React-work-with-Typescript/</id>
    <published>2020-10-05T09:21:45.000Z</published>
    <updated>2020-10-05T10:15:09.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-problem-with-Mobx-and-TypeScript"><a href="#The-problem-with-Mobx-and-TypeScript" class="headerlink" title="The problem with Mobx and TypeScript"></a>The problem with Mobx and TypeScript</h2><p>The <a href="https://github.com/mobxjs/mobx-react#strongly-typing-inject">official solution to support TypeScript</a> sucks. They are basically asking you to make stores optional in your Prop types:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;</span>&#123; userStore?: IUserStore; otherProp: number &#125;, &#123;&#125;&gt; &#123;</span><br><span class="line">    <span class="comment">/* etc */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>then use a bang to tell the compiler your stores are present:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">render</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> &#123;a, b&#125; = <span class="keyword">this</span>.store!</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is truly inelegant. Below you will find a much better setup to have <a href="https://mobx.js.org/README.html">Mobx</a> and React play nice with TypeScript.<br><br /></p><h2 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR;"></a>TLDR;</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; inject, IWrappedComponent, observer &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx-react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MyStoreClass &#125; <span class="keyword">from</span> <span class="string">&#x27;./myStore&#x27;</span>;</span><br><span class="line"></span><br><span class="line">type StoreProps = &#123;</span><br><span class="line">  myStore: MyStoreClass;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">interface Props <span class="keyword">extends</span> StoreProps &#123;</span><br><span class="line">  realProp: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@inject(<span class="string">&#x27;myStore&#x27;</span>)</span><br><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">Props</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;&#125; <span class="keyword">as</span> StoreProps;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; myStore, realProp &#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    [...]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App <span class="keyword">as</span> <span class="keyword">typeof</span> App &amp; IWrappedComponent&lt;Props&gt;;</span><br></pre></td></tr></table></figure><br /><h2 id="Working-Example"><a href="#Working-Example" class="headerlink" title="Working Example"></a>Working Example</h2><iframe  src='https://codesandbox.io/embed/frosty-mountain-bpmpq?fontsize=14&hidenavigation=1&theme=dark'  style='width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;'  title='frosty-mountain-bpmpq'  allow='accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking'  sandbox='allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts'></iframe><br /><br /><br /><h2 id="Explanations-and-Steps-to-convert-your-code"><a href="#Explanations-and-Steps-to-convert-your-code" class="headerlink" title="Explanations and Steps to convert your code"></a>Explanations and Steps to convert your code</h2><p>Consider the following example, a simple counter app with a <a href="https://github.com/mobxjs/mobx-react#provider-and-inject">store injected through the context</a>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx-react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> counterStore <span class="keyword">from</span> <span class="string">&#x27;./counterStore&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootElement = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">render(</span><br><span class="line">  &lt;Provider counterStore=&#123;counterStore&#125;&gt;</span><br><span class="line">    &lt;App title=<span class="string">&#x27;normal prop title&#x27;</span> /&gt;</span><br><span class="line">  &lt;/Provider&gt;,</span><br><span class="line">  rootElement</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// counterStore.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; observable &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CounterStore</span> </span>&#123;</span><br><span class="line">  @observable counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  increment() &#123;</span><br><span class="line">    <span class="built_in">this</span>.counter++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  decrement() &#123;</span><br><span class="line">    <span class="built_in">this</span>.counter--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> CounterStore();</span><br><span class="line"></span><br><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; inject, observer &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx-react&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@inject(<span class="string">&#x27;counterStore&#x27;</span>)</span><br><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; counterStore, title &#125; = <span class="built_in">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&#123;title&#125;&lt;/div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="function">() =&gt;</span> counterStore.increment()&#125;&gt;+<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">        &lt;span&gt;&#123;counterStore.counter&#125;&lt;/span&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="function">() =&gt;</span> counterStore.decrement()&#125;&gt;<span class="number">-1</span>&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h2 id="Converting-to-TypeScript"><a href="#Converting-to-TypeScript" class="headerlink" title="Converting to TypeScript"></a>Converting to TypeScript</h2><h3 id="Important"><a href="#Important" class="headerlink" title="Important:"></a>Important:</h3><ul><li>This will only work with Mobx 5 as v6 dropped decorators support. <a href="https://github.com/mobxjs/mobx/issues/2325">Discussion</a></li><li>You will also need to stay on <code>mobx-react</code> v6 <a href="https://github.com/mobxjs/mobx-react#choosing-your-version">to be compatible with mobx 5</a>.</li><li>If you are starting from scratch and you can get away with only injecting your stores through hooks, you don’t need all this.</li></ul><h3 id="1-Filenames"><a href="#1-Filenames" class="headerlink" title="1. Filenames"></a>1. Filenames</h3><p>Convert all the files to <code>.ts</code> and <code>.tsx</code></p><h3 id="2-Convert-the-store-to-TS"><a href="#2-Convert-the-store-to-TS" class="headerlink" title="2. Convert the store to TS"></a>2. Convert the store to TS</h3><p>Pretty straightforward, add the type for <code>counter</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[...]</span><br><span class="line">@observable counter: number = <span class="number">0</span>;</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><h3 id="3-Typed-Props-for-the-App-Component"><a href="#3-Typed-Props-for-the-App-Component" class="headerlink" title="3. Typed Props for the App Component"></a>3. Typed Props for the App Component</h3><p>Let’s split the injected stores props and the actual props (you will see why later).</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; CounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;./counterStore&#x27;</span>;</span><br><span class="line"></span><br><span class="line">type StoreProps = &#123;</span><br><span class="line">  counterStore: CounterStore;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">interface Props <span class="keyword">extends</span> StoreProps &#123;</span><br><span class="line">  title: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@inject(<span class="string">&#x27;counterStore&#x27;</span>)</span><br><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">Props</span>&gt; </span>&#123;</span><br><span class="line">  [...]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>The warnings in our <code>App</code> component are now gone but the <code>index.ts</code> file is complaining about the missing <code>counterStore</code>.</p><h3 id="4-Fixing-the-App-Component-exported-type"><a href="#4-Fixing-the-App-Component-exported-type" class="headerlink" title="4. Fixing the App Component exported type"></a>4. Fixing the App Component exported type</h3><p>First of all we need to specify <code>defaultProps</code> so that the compiler does not expect us to pass the store down</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@inject(<span class="string">&#x27;counterStore&#x27;</span>)</span><br><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">Props</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;&#125; <span class="keyword">as</span> StoreProps;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    [...]</span><br></pre></td></tr></table></figure><p>then we need to adjust the type of the default export (our Component). This will help TypeScript recognize the fact that <code>App</code> has a static <code>wrappedComponent</code> property.</p><p>This is especially useful in unit tests as you will probably want to test <code>App.wrappedComponent</code> instead of <code>App</code>.</p><p>Here is how to export the correct type:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App <span class="keyword">as</span> (<span class="keyword">typeof</span> App &amp; IWrappedComponent&lt;Props&gt;);</span><br></pre></td></tr></table></figure><p>Your app is now ready to go ! </p><h3 id="5-Full-code"><a href="#5-Full-code" class="headerlink" title="5. Full code"></a>5. Full code</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.tsx</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx-react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./counterStore&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootElement = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">render(</span><br><span class="line">  &lt;Provider counterStore=&#123;store&#125;&gt;</span><br><span class="line">    &lt;App title=<span class="string">&#x27;normal prop title&#x27;</span> /&gt;</span><br><span class="line">  &lt;/Provider&gt;,</span><br><span class="line">  rootElement</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// counterStore.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; observable &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CounterStore</span> </span>&#123;</span><br><span class="line">  @observable counter: number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  increment() &#123;</span><br><span class="line">    <span class="built_in">this</span>.counter++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  decrement() &#123;</span><br><span class="line">    <span class="built_in">this</span>.counter--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> CounterStore();</span><br><span class="line"></span><br><span class="line"><span class="comment">// App.tsx</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; inject, IWrappedComponent, observer &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx-react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;./counterStore&#x27;</span>;</span><br><span class="line"></span><br><span class="line">type StoreProps = &#123;</span><br><span class="line">  counterStore: CounterStore;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">interface Props <span class="keyword">extends</span> StoreProps &#123;</span><br><span class="line">  title: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@inject(<span class="string">&#x27;counterStore&#x27;</span>)</span><br><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">Props</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;&#125; <span class="keyword">as</span> StoreProps;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; counterStore, title &#125; = <span class="built_in">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&#123;title&#125;&lt;/div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="function">() =&gt;</span> counterStore.increment()&#125;&gt;+<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">        &lt;span&gt;&#123;counterStore.counter&#125;&lt;/span&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="function">() =&gt;</span> counterStore.decrement()&#125;&gt;<span class="number">-1</span>&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App <span class="keyword">as</span> <span class="keyword">typeof</span> App &amp; IWrappedComponent&lt;Props&gt;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;The-problem-with-Mobx-and-TypeScript&quot;&gt;&lt;a href=&quot;#The-problem-with-Mobx-and-TypeScript&quot; class=&quot;headerlink&quot; title=&quot;The problem with Mob</summary>
      
    
    
    
    
    <category term="React" scheme="http://www.codeblocq.com/tags/React/"/>
    
    <category term="Mobx" scheme="http://www.codeblocq.com/tags/Mobx/"/>
    
    <category term="TypeScript" scheme="http://www.codeblocq.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Loose assertions on arguments passed to function with Jest</title>
    <link href="http://www.codeblocq.com/2020/09/Loose-assertions-on-arguments-passed-to-function-with-Jest/"/>
    <id>http://www.codeblocq.com/2020/09/Loose-assertions-on-arguments-passed-to-function-with-Jest/</id>
    <published>2020-09-22T15:43:11.000Z</published>
    <updated>2020-09-22T16:22:16.713Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Consider the following function and passing test</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">bar, arg</span>) </span>&#123;</span><br><span class="line">  bar(<span class="built_in">Math</span>.random(), arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="string">&quot;bar is called&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> barSpy = jest.fn();</span><br><span class="line">  foo(barSpy, <span class="string">&quot;fake-argument&quot;</span>);</span><br><span class="line"></span><br><span class="line">  expect(barSpy).toHaveBeenCalled();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>foo</code> is a function that calls <code>bar</code> with a random first argument and <code>arg</code> which is just passed through.</p><p>The test passes as expected, but what if we wanted to check that the second argument is equal to <code>arg</code>.</p><p><code>expect(...).toHaveBeenCalledWith(...args)</code> requires the test to provide the exact list of arguments passed to our <code>jest.fn</code> spy during the call.</p><br />### Solution<p>Use the <strong>asymetric matcher</strong> <a href="https://jestjs.io/docs/en/expect.html#expectanything">expect.anything()</a> to ignore the first argument passed to <code>foo</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">&quot;Match any argument&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> barSpy = jest.fn();</span><br><span class="line">  foo(barSpy, <span class="string">&quot;fake-argument&quot;</span>);</span><br><span class="line"></span><br><span class="line">  expect(barSpy).toHaveBeenCalledWith(expect.anything(), <span class="string">&quot;fake-argument&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br />### Better Solution<p>Use <a href="https://jestjs.io/docs/en/expect.html#expectanyconstructor">expect.any(constructor)</a> to check that the first argument is a number</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">&quot;Match any number&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> barSpy = jest.fn();</span><br><span class="line">  foo(barSpy, <span class="string">&quot;fake-argument&quot;</span>);</span><br><span class="line"></span><br><span class="line">  expect(barSpy).toHaveBeenCalledWith(expect.any(<span class="built_in">Number</span>), <span class="string">&quot;fake-argument&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br />### Other asymetric matchers<p>Jest also provides the following useful asymetric matchers:</p><p><a href="https://jestjs.io/docs/en/expect.html#expectobjectcontainingobject">expect.objectContaining(object)</a> to check only certain properties of an object</p><p><a href="https://jestjs.io/docs/en/expect.html#expectarraycontainingarray">expect.arrayContaining(array)</a> to check only certain elements of an array</p><p><a href="https://jestjs.io/docs/en/expect.html#expectstringcontainingstring">expect.stringContaining(string)</a> to check part of a string</p><br />### Going further with jest-extended<p>If you need to be even more specific in your assertions, it might be worth checking out <a href="https://github.com/jest-community/jest-extended">jest-extended</a></p><p>You will find useful additions to the base jest assertion API like:</p><p><a href="https://github.com/jest-community/jest-extended#tobewithinstart-end">myNumber.toBeWithin(0, 10)</a></p><p><a href="https://github.com/jest-community/jest-extended#tocontainkeyskeys">myObject.toContainKeys([keys])</a></p><p><a href="https://github.com/jest-community/jest-extended#tostartwithprefix">myText.toStartWith(prefix)</a></p><p>and many more ..</p><br />Happy testing :)]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h3&gt;&lt;p&gt;Consider the following function and passing test&lt;/</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://www.codeblocq.com/tags/JavaScript/"/>
    
    <category term="Jest" scheme="http://www.codeblocq.com/tags/Jest/"/>
    
    <category term="Unit Tests" scheme="http://www.codeblocq.com/tags/Unit-Tests/"/>
    
  </entry>
  
  <entry>
    <title>Check if a Docker image exists locally</title>
    <link href="http://www.codeblocq.com/2020/04/Check-if-a-Docker-image-exists-locally/"/>
    <id>http://www.codeblocq.com/2020/04/Check-if-a-Docker-image-exists-locally/</id>
    <published>2020-04-09T15:54:36.000Z</published>
    <updated>2020-10-09T16:59:52.375Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Exact-tag-docker-image-inspect"><a href="#1-Exact-tag-docker-image-inspect" class="headerlink" title="1. Exact tag: docker image inspect"></a>1. Exact tag: <code>docker image inspect</code></h2><p>Use <a href="https://docs.docker.com/engine/reference/commandline/image_inspect/">docker image inspect</a> to check that a specific image and tag exists.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image inspect node:latest</span><br></pre></td></tr></table></figure><p>Image exists:</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;sha256:f47907840247d2929aa083a54565882af6fd35b011f3e2c8a7f3b0294500142a&quot;</span>,</span><br><span class="line">    <span class="string">&quot;RepoTags&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;node:latest&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Image does not exist:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[]</span><br><span class="line"><span class="keyword">Error: </span>No such image</span><br></pre></td></tr></table></figure><br /><h2 id="2-List-of-images-docker-images"><a href="#2-List-of-images-docker-images" class="headerlink" title="2. List of images: docker images"></a>2. List of images: <code>docker images</code></h2><p>Use <a href="https://docs.docker.com/engine/reference/commandline/images/">docker images</a> to get a list of images installed locally. You can add the name of an image to filter the list.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker images node</span><br><span class="line"></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">node                lts-alpine3.9       87f8cdfc269e        24 hours ago        89.3MB</span><br><span class="line">node                latest              f47907840247        25 hours ago        943MB</span><br><span class="line">node                &lt;none&gt;              d308ffbc8182        3 weeks ago         89MB</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Exact-tag-docker-image-inspect&quot;&gt;&lt;a href=&quot;#1-Exact-tag-docker-image-inspect&quot; class=&quot;headerlink&quot; title=&quot;1. Exact tag: docker image i</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://www.codeblocq.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>A-Star Pathfinding React Demo</title>
    <link href="http://www.codeblocq.com/2020/01/A-Star-Pathfinding-React-Demo/"/>
    <id>http://www.codeblocq.com/2020/01/A-Star-Pathfinding-React-Demo/</id>
    <published>2020-01-11T17:14:07.000Z</published>
    <updated>2020-01-12T12:39:37.497Z</updated>
    
    <content type="html"><![CDATA[<p>Check out the <a href="http://a-star-pathfinding.codeblocq.com/">demo here</a>.</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>The A-Star Pathfinding algorithm finds the shortest path in between 2 points while avoiding obstacles.</p><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><p>To understand how the algorithm works, I highly recommend the following video by Sebastian Lague:</p><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/-L-WgKMFuhE" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h2 id="Explanations"><a href="#Explanations" class="headerlink" title="Explanations"></a>Explanations</h2><h3 id="The-basic-logic-is-pretty-straightforward"><a href="#The-basic-logic-is-pretty-straightforward" class="headerlink" title="The basic logic is pretty straightforward:"></a>The basic logic is pretty straightforward:</h3><p>For each cell around the start node, calculate 3 properties:</p><ul><li>The distance from the start node - commonly called <code>G Cost</code></li><li>The distance from to the end node - commonly called <code>H Cost</code></li><li>The sum of the two - commonly called <code>F Cost = G Cost + H Cost</code></li></ul><p>Then pick the node with the lowest <code>F Cost</code> amongst all the nodes and start the process again. When finding the next node to use as a pivot, consider the newly calculated nodes and the previous ones as well.</p><p>If there is a path, it should eventually be reached. Otherwise eject !</p><h3 id="The-part-that-is-a-bit-trickier"><a href="#The-part-that-is-a-bit-trickier" class="headerlink" title="The part that is a bit trickier:"></a>The part that is a bit trickier:</h3><p>The distance from the start for a new Node A is equal to the distance in between Node A and its parent + the distance in between that parent and the start node <u>and not the absolute distance from the start node.</u></p><p>This is important as otherwise, obstacles would not be taken into account.</p><p>This has 2 consequences: </p><ul><li>When computing a new node, the parent node needs to be saved as well. This will form a <a href="/2016/05/ES6-ES2015-LinkedList-Implementation/">linked list</a> of sorts that will save the whole path information from the start.</li><li>When looking at the neighbooring nodes, always check the already computed nodes as well and see if a smaller <code>G Cost</code> can be found <u>through the current node</u>. If that is the case, the <code>G Cost</code>, <code>F Cost</code> and parent need to be updated for that neighbooring node with the new best path information.</li></ul><p>When using the app I have created, you can hover over the cells to checkout the different properties that were computed.</p><h2 id="Pseudo-Code-based-on-my-implementation"><a href="#Pseudo-Code-based-on-my-implementation" class="headerlink" title="Pseudo Code based on my implementation"></a>Pseudo Code based on my implementation</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">create</span> <span class="selector-tag">an</span> <span class="selector-tag">OPEN</span> <span class="selector-tag">list</span> <span class="selector-tag">that</span> <span class="selector-tag">will</span> <span class="selector-tag">hold</span> <span class="selector-tag">the</span> <span class="selector-tag">computed</span> <span class="selector-tag">nodes</span></span><br><span class="line"><span class="selector-tag">create</span> <span class="selector-tag">a</span> <span class="selector-tag">GRID</span> <span class="selector-tag">of</span> <span class="selector-tag">cells</span> <span class="selector-tag">with</span> <span class="selector-tag">properties</span> ↵</span><br><span class="line">  <span class="selector-tag">including</span> (<span class="selector-tag">fCost</span>, <span class="selector-tag">gCost</span>, <span class="selector-tag">hCost</span>, <span class="selector-tag">parentNode</span>, <span class="selector-tag">isClosed</span>, <span class="selector-tag">xCoordinate</span>, <span class="selector-tag">yCoordinate</span>)</span><br><span class="line">  </span><br><span class="line"><span class="selector-tag">insert</span> <span class="selector-tag">the</span> <span class="selector-tag">start</span> <span class="selector-tag">node</span> <span class="selector-tag">into</span> <span class="selector-tag">the</span> <span class="selector-tag">OPEN</span> <span class="selector-tag">list</span></span><br><span class="line">  </span><br><span class="line">while there are nodes inside OPEN // Main loop</span><br><span class="line">  <span class="selector-tag">take</span> <span class="selector-tag">the</span> <span class="selector-tag">node</span> <span class="selector-tag">inside</span> <span class="selector-tag">OPEN</span> <span class="selector-tag">with</span> <span class="selector-tag">the</span> <span class="selector-tag">smallest</span> <span class="selector-tag">fCost</span> <span class="selector-tag">-</span>&gt; <span class="selector-tag">CURRENT</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">if</span> <span class="selector-tag">CURRENT</span> <span class="selector-tag">is</span> <span class="selector-tag">the</span> <span class="selector-tag">END</span> <span class="selector-tag">node</span></span><br><span class="line">    go back through the parents to compute the path and return. It&#x27;s done</span><br><span class="line">  </span><br><span class="line">  <span class="selector-tag">remove</span> <span class="selector-tag">CURRENT</span> <span class="selector-tag">from</span> <span class="selector-tag">the</span> <span class="selector-tag">OPEN</span> <span class="selector-tag">list</span></span><br><span class="line">  set the GRID cell with the CURRENT coordinates to isClosed = true</span><br><span class="line">  </span><br><span class="line">  <span class="selector-tag">for</span> <span class="selector-tag">each</span> <span class="selector-tag">NEIGHBOR</span> <span class="selector-tag">of</span> <span class="selector-tag">CURRENT</span></span><br><span class="line">    <span class="selector-tag">if</span> <span class="selector-tag">NEIGHBOR</span> <span class="selector-tag">is</span> <span class="selector-tag">blocked</span> <span class="selector-tag">by</span> <span class="selector-tag">an</span> <span class="selector-tag">obstacle</span>, <span class="selector-tag">a</span> <span class="selector-tag">closed</span> <span class="selector-tag">cell</span> <span class="selector-tag">or</span> <span class="selector-tag">out</span> <span class="selector-tag">of</span> <span class="selector-tag">bounds</span></span><br><span class="line">      <span class="selector-tag">move</span> <span class="selector-tag">on</span> <span class="selector-tag">to</span> <span class="selector-tag">the</span> <span class="selector-tag">next</span> <span class="selector-tag">NEIGHBOR</span></span><br><span class="line">    </span><br><span class="line">    <span class="selector-tag">calculate</span> <span class="selector-tag">the</span> <span class="selector-tag">gCost</span> <span class="selector-tag">for</span> <span class="selector-tag">NEIGHBOR</span> <span class="selector-tag">which</span> <span class="selector-tag">is</span> <span class="selector-tag">gCost</span> <span class="selector-tag">of</span> <span class="selector-tag">CURRENT</span> + <span class="selector-tag">distance</span> <span class="selector-tag">to</span> <span class="selector-tag">NEIGHBOR</span> ↵</span><br><span class="line">      (<span class="selector-tag">distance</span> 1 <span class="selector-tag">if</span> <span class="selector-tag">in</span> <span class="selector-tag">a</span> <span class="selector-tag">straight</span> <span class="selector-tag">line</span> <span class="selector-tag">or</span> <span class="selector-tag">sqrt</span>(2) ~ 1<span class="selector-class">.4</span> <span class="selector-tag">if</span> <span class="selector-tag">in</span> <span class="selector-tag">a</span> <span class="selector-tag">diagonal</span>)</span><br><span class="line">  </span><br><span class="line">    <span class="selector-tag">if</span> <span class="selector-tag">NEIGHBOR</span> <span class="selector-tag">is</span> <span class="selector-tag">not</span> <span class="selector-tag">in</span> <span class="selector-tag">OPEN</span></span><br><span class="line">      <span class="selector-tag">add</span> <span class="selector-tag">it</span> <span class="selector-tag">to</span> <span class="selector-tag">OPEN</span> <span class="selector-tag">and</span> <span class="selector-tag">set</span> <span class="selector-tag">the</span> <span class="selector-tag">rest</span> <span class="selector-tag">of</span> <span class="selector-tag">its</span> <span class="selector-tag">properties</span> (<span class="selector-tag">hCost</span>, <span class="selector-tag">fCost</span> <span class="selector-tag">and</span> <span class="selector-tag">parent</span>)</span><br><span class="line">    <span class="selector-tag">else</span> <span class="selector-tag">if</span> <span class="selector-tag">NEIGHBOR</span> <span class="selector-tag">is</span> <span class="selector-tag">in</span> <span class="selector-tag">OPEN</span> <span class="selector-tag">but</span> <span class="selector-tag">the</span> <span class="selector-tag">new</span> <span class="selector-tag">gCost</span> <span class="selector-tag">is</span> <span class="selector-tag">smaller</span> <span class="selector-tag">than</span> <span class="selector-tag">the</span> <span class="selector-tag">existing</span> <span class="selector-tag">node</span></span><br><span class="line">      <span class="selector-tag">update</span> <span class="selector-tag">the</span> <span class="selector-tag">gCost</span>, <span class="selector-tag">fCost</span> <span class="selector-tag">and</span> <span class="selector-tag">parent</span> <span class="selector-tag">of</span> <span class="selector-tag">that</span> <span class="selector-tag">node</span></span><br></pre></td></tr></table></figure><p>The TypeScript implementation is available <a href="https://github.com/klugjo/a-star-react/blob/master/src/algorithm.ts">here</a> and the full code is available on <a href="https://github.com/klugjo/a-star-react">GitHub</a></p><p>Thanks for reading :)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Check out the &lt;a href=&quot;http://a-star-pathfinding.codeblocq.com/&quot;&gt;demo here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://www.codeblocq.com/tags/JavaScript/"/>
    
    <category term="React" scheme="http://www.codeblocq.com/tags/React/"/>
    
    <category term="Algorithm" scheme="http://www.codeblocq.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>My Free and Open Source Expense Tracker App is on the App Store</title>
    <link href="http://www.codeblocq.com/2019/11/KlugSaver-My-Free-and-Open-Source-Expense-Tracker-App/"/>
    <id>http://www.codeblocq.com/2019/11/KlugSaver-My-Free-and-Open-Source-Expense-Tracker-App/</id>
    <published>2019-11-10T10:16:49.000Z</published>
    <updated>2019-11-10T02:45:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have spent a good chunk of the beginning of this year developing my first React Native app.</p><p>You can download it on the <a href="https://apps.apple.com/ph/app/klug-saver/id1467169332">Apple App Store</a> if you are on iOS.</p><p>You can also check out the <a href="https://www.klugsaver.com/">website</a>.</p><h2 id="Tech"><a href="#Tech" class="headerlink" title="Tech"></a>Tech</h2><p>The app is written in <a href="https://facebook.github.io/react-native/">React Native</a> using <a href="https://www.typescriptlang.org/">TypeScript</a> and <a href="https://redux.js.org/introduction/getting-started">Redux</a>.</p><p>For privacy reasons, all the user’s expenses are saved on the device itself, with the possibility to back it up in <a href="https://www.dropbox.com/">DropBox</a>.</p><p>The website is hosted on <a href="https://www.netlify.com/">Netlify</a>.</p><p>The code is available on <a href="https://github.com/klugjo/klug-saver">GitHub</a></p><h2 id="Vision"><a href="#Vision" class="headerlink" title="Vision"></a>Vision</h2><p>I wanted to find a simple way to log my expenses and have a quick look at where my money goes, month by month. I found it scary that most of the highly rated apps on the App Store would ask for my personal information before I can start logging expenses or even ask me to link my bank account.</p><p>So I have built this app for fun and my own usage. I have been using it everyday for about a year and it has been super helpful. A few friends have been using it as well and the feedback has been good.</p><h2 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h2><p>I had never worked with React Native before and here are some high level thoughts.</p><ul><li>If you are building more than a prototype, eject from <a href="https://expo.io/">Expo</a> ASAP. There are too many limitations and perfomance issues.</li><li>Setting up TypeScript was a bit tedious, at the time I could not find any boilerplate that worked for me and ended up doing it the hard way and setting up everything from scratch. Feel free to have a look at my project and reuse my setup.</li><li>Same thing for Jest and Enzyme, not straight forward but now it works like a charm.</li><li>I started by looking at some UI libraries like I would do for a React Web project. Most of them are really limited or not free. The ecosystem is definitely not as vibrant as React for the web. React Native flexbox works differently than on the web, <a href="http://flexbox.buildwithreact.com/">http://flexbox.buildwithreact.com/</a> was super helpful during development.</li><li>I have enountered very limited performance issues and would definitely use React Native again if I had to develop another app. As a mostly React developer in my day job, using React Native was an absolute delight.</li></ul><p>Once again, thanks for reading and if you happen to use the app and have any feedback, <a href="https://forms.gle/XU76tnDUzgVnjXHM8">Send it Here</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I have spent a good chunk of the beginning of this year developing my first React Native app.&lt;/p&gt;
&lt;p&gt;You can download it on the &lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://www.codeblocq.com/tags/JavaScript/"/>
    
    <category term="React" scheme="http://www.codeblocq.com/tags/React/"/>
    
    <category term="TypeScript" scheme="http://www.codeblocq.com/tags/TypeScript/"/>
    
    <category term="KlugSaver" scheme="http://www.codeblocq.com/tags/KlugSaver/"/>
    
    <category term="React Native" scheme="http://www.codeblocq.com/tags/React-Native/"/>
    
    <category term="iOS" scheme="http://www.codeblocq.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Pass artifacts around in between stages in gitlab CI</title>
    <link href="http://www.codeblocq.com/2019/03/Pass-artifacts-around-in-between-stages-in-gitlab-CI/"/>
    <id>http://www.codeblocq.com/2019/03/Pass-artifacts-around-in-between-stages-in-gitlab-CI/</id>
    <published>2019-03-24T12:54:51.000Z</published>
    <updated>2020-09-27T06:50:03.018Z</updated>
    
    <content type="html"><![CDATA[<p>Use the <a href="https://docs.gitlab.com/ee/ci/yaml/#artifacts">artifacts</a> property to pass build artifacts from one build stage down to <strong>all the following stages</strong>.</p><figure class="highlight yaml"><figcaption><span>.gitlab-cy.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">stage_1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">stage_2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">one:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">stage_1</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;File 1&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">./file1.txt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;File 2&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">./file2.txt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mkdir</span> <span class="string">dir1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;dir1 File&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">./dir1/file.txt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mkdir</span> <span class="string">dir2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;dir2 File&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">./dir2/file.txt</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">file1.txt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dir1/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">two:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">stage_2</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ls</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ls</span> <span class="string">dir1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cat</span> <span class="string">file1.txt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cat</span> <span class="string">dir1/file.txt</span></span><br></pre></td></tr></table></figure><p>In the <code>.gitlab-ci.yml</code> above we are defining a build with 2 stages.</p><p>In <code>stage_1</code> we are creating 4 files:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── dir1</span><br><span class="line">│   └── file.txt</span><br><span class="line">├── dir2</span><br><span class="line">│   └── file.txt</span><br><span class="line">├── file1.txt</span><br><span class="line">└── file2.txt</span><br></pre></td></tr></table></figure><p>In <code>stage_2</code>, the following files files (created in <code>stage_1</code>) are available:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── dir1</span><br><span class="line">│   └── file.txt</span><br><span class="line">├── file1.txt</span><br></pre></td></tr></table></figure><p>The magic happens in the <code>artifacts</code> section of <code>stage_1</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">artifacts:</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">file1.txt</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dir1/</span></span><br></pre></td></tr></table></figure><p>which means pass <code>file1.txt</code> and the <code>dir1</code> folder (+ it’s content) to <strong>all the following stages</strong>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Use the &lt;a href=&quot;https://docs.gitlab.com/ee/ci/yaml/#artifacts&quot;&gt;artifacts&lt;/a&gt; property to pass build artifacts from one build stage down </summary>
      
    
    
    
    
    <category term="Build" scheme="http://www.codeblocq.com/tags/Build/"/>
    
    <category term="Gitlab" scheme="http://www.codeblocq.com/tags/Gitlab/"/>
    
    <category term="CI" scheme="http://www.codeblocq.com/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>How to start a tech company as a non technical individual</title>
    <link href="http://www.codeblocq.com/2018/06/How-to-start-a-tech-compnay-as-a-non-technical-individual/"/>
    <id>http://www.codeblocq.com/2018/06/How-to-start-a-tech-compnay-as-a-non-technical-individual/</id>
    <published>2018-06-23T09:20:33.000Z</published>
    <updated>2018-06-23T02:57:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>As a software engineer, I have had countless coffees and meetings with non technical “co founders” that want to build an app, website or platform of some sort. Their budgets go from a few hundreds to more than 50K USD for some. They almost always have great ideas and execution plans, except when it comes to the tech.</p><p>After spending hours discussing these things, here are my thoughts, conclusions and reflections. Hoping it might help some of you.</p><blockquote><p>TLDR; if you don’t have any (signed, paying) customers and you only have a business idea, you don’t need an app or a website. An email, a phone and a Google spreadsheet is all you need. If an online presence is necessary, 50 bucks should be your maximum spend. Also software developers are difficult to deal with and once you own a system, you will have to pay constant maintenance fees.</p></blockquote><p>Let’s have a look at how you would start a ride sharing company (Uber, Grab, Lyft …) without even talking to a single software engineer.</p><p>First thing you might think is that you need an app. Wrong, all you need are drivers and passengers. If it’s you and another co founder you can scale up to a few hundred rides a day with zero tech.</p><h3 id="Here-is-what-you-need"><a href="#Here-is-what-you-need" class="headerlink" title="Here is what you need:"></a>Here is what you need:</h3><ul><li>A big map of the city you are in</li><li>Some pins</li><li>Phones</li><li>Google Forms</li><li>Social Media and Forums</li></ul><h3 id="Here-is-your-setup"><a href="#Here-is-your-setup" class="headerlink" title="Here is your setup:"></a>Here is your setup:</h3><ul><li>Start with whatever medium you think is best to build your audience and find your first customers (FB page, LinkedIn group, word of mouth, depending on what makes sense for you).</li><li>Setup a <a href="https://www.google.com/forms/about/">Google Form</a> with 4 fields: Name, Phone, Location, Destination.</li><li>Link to that Google Form from your FB page.</li><li>Advertise around and go talk to potential riders and ask them to try your service. Online, offline.</li></ul><h3 id="Here-is-your-execution-plan"><a href="#Here-is-your-execution-plan" class="headerlink" title="Here is your execution plan:"></a>Here is your execution plan:</h3><ul><li>When your first customer posts his itinerary using the Google Form, pick up the phone and call him to know exactly where he is and brief him on the driver that will pick him up and how long until he is there. Obviously you will need a driver available or go drive there yourself.</li><li>Whenever a driver drops a passenger, ask him to stay put and place a pin on the map at his location.</li><li>Wait for another passenger and keep on going and growing this way.</li><li>When you are running out of pins or your map is too small, time to look at scaling and adding in more tech. Until then, focus on hiring more drivers, getting more passengers. Learn as much as possible along the way. Learn about everyone’s motivations, difficulties, adjust your prices, develop your brand and make your first customers as happy as possible.</li><li>Invest all that money you had saved up for an app in company swag, free rides, driver incentives, marketing and things that add value to your customers and will help them remember you.</li></ul><h3 id="Advantages"><a href="#Advantages" class="headerlink" title="Advantages:"></a>Advantages:</h3><ul><li>You can get started NOW! You can probably achieve all this in a few weeks and get your first passenger in 24 hours. How amazing is that. If you were to develop an app, it might take you 6 months and more than 50,000 dollars to get there. Plus people don’t download apps, so you would have to go back to the Google Form solution anyways.</li><li>You have done everything yourself and you understand everything that is going on. They say that there is not a single business plan that survived the first customer. That app idea you have in your head is probably not gonna work in the way you think it will. Focus on learning about your customers and developing a manual system. Once you have a well oiled process, progressively automate the most boring and repetitive tasks.</li><li>The day you need a software engineer, instead of sheepishly asking them out for coffee and wasting your time talking about how apps, AI and bots are gonna change the world, show them what you have done. I can guarantee you they will love it and will get started the day itself.</li></ul><h3 id="How-to-start-introducing-some-tech"><a href="#How-to-start-introducing-some-tech" class="headerlink" title="How to start introducing some tech:"></a>How to start introducing some tech:</h3><p>(Once again, as tempting as it seems, don’t start here if you haven’t done the first steps, you’d just be procrastinating. Don’t optimize prematurely and until you have validated your assumptions IRL)</p><ul><li>Invest 20 bucks in a logo.</li><li>Replace the Google Form with a landing page and custom form. Most 12 years olds of today should be able to do that for your. Ask your cousin. 50 bucks max.</li><li>Get a domain name. 15 bucks a year.</li><li>Get web hosting. 10-20 bucks a year.</li><li>Scale where it hurts, if your map is too small get a bigger one or start using google maps and Excel. This should get you to a thousand rides a day.</li><li>Only then should you start talking to devs. Get someone good. A senior engineer with ~10 yrs experience should only cost you double what a young grad would. But the outcome will be a different order of magnitude. Most important, find someone you trust because the tech will soon become a black box and you’ll have no clue what is going on.</li></ul><h3 id="Things-you-don’t-need-unless-you-are-already-an-expert-in-that-space-and-that’s-where-you-want-to-operate"><a href="#Things-you-don’t-need-unless-you-are-already-an-expert-in-that-space-and-that’s-where-you-want-to-operate" class="headerlink" title="Things you don’t need (unless you are already an expert in that space and that’s where you want to operate):"></a>Things you don’t need (unless you are already an expert in that space and that’s where you want to operate):</h3><ul><li>AI</li><li>Bots</li><li>VR</li><li>Apps and websites</li><li>SMS Apis</li><li>Image recognition</li><li>Blockchain</li></ul><h3 id="If-you-are-technical-founder"><a href="#If-you-are-technical-founder" class="headerlink" title="If you are technical founder:"></a>If you are technical founder:</h3><p><strong>SAME RULES APPLY</strong>. If you are starting a consumer startup in a space you are not super familiar with, begin with helping your co founder do all these things that don’t scale. There is no need to start thinking about database engines and multi leader replication at this point. Learn the domain first.</p><p>Hope that helps. This stuff isn’t new but in case you needed to hear it from me, here it is 😉</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;As a software engineer, I have had countless coffees and meetings with non technical “co founders” that want to build an app, website or </summary>
      
    
    
    
    
    <category term="Startups" scheme="http://www.codeblocq.com/tags/Startups/"/>
    
    <category term="Business" scheme="http://www.codeblocq.com/tags/Business/"/>
    
    <category term="General" scheme="http://www.codeblocq.com/tags/General/"/>
    
  </entry>
  
  <entry>
    <title>Setup gitment on your Hexo blog</title>
    <link href="http://www.codeblocq.com/2018/05/Setup-gitment-on-your-Hexo-blog/"/>
    <id>http://www.codeblocq.com/2018/05/Setup-gitment-on-your-Hexo-blog/</id>
    <published>2018-05-27T09:33:31.000Z</published>
    <updated>2018-05-28T12:36:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>After 2 years running disqus on my blog, I have decided to switch over to <a href="https://github.com/imsun/gitment">gitment</a>. The spam and slowness of Disqus is what drove me away from it. Plus no more ads for users.</p><p>Gitment is a small JS library that leverages on Github issues to store comments for each post: </p><ul><li>Each post will have a matching Github issue (<a href="https://github.com/klugjo/klugjo.github.io/issues">example for this blog</a>). </li><li>Users will have to be logged in to github to post. </li><li>Comments are saved as github comments on each issue/post</li><li>Gitment takes care of displaying a form that allows users to see/post comments</li></ul><p>Let’s get started.</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>You can use the hosted libraries:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://imsun.github.io/gitment/style/default.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://imsun.github.io/gitment/dist/gitment.browser.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>or build them yourself </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">clone git@github.com:imsun/gitment.git</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">gitment</span></span><br><span class="line"><span class="attr">npm</span> <span class="string">install</span></span><br><span class="line"><span class="attr">npm</span> <span class="string">build</span></span><br></pre></td></tr></table></figure><p>Once you are sure that <code>gitment.browser.js</code> and <code>default.css</code> are present on your site, let’s move on to the setup.</p><h2 id="Setup-Github"><a href="#Setup-Github" class="headerlink" title="Setup Github"></a>Setup Github</h2><p>First of all we are going to need an OAuth application.</p><ul><li><a href="https://github.com/settings/applications/new">Click here</a> to register an OAuth application.</li><li>Save the client ID and client secret somewhere.</li><li>For the callback URL, use the same domain as your blog (I am using <a href="http://www.codeblocq.com/">http://www.codeblocq.com/</a>).</li></ul><h2 id="Integrate-Gitment-in-Hexo"><a href="#Integrate-Gitment-in-Hexo" class="headerlink" title="Integrate Gitment in Hexo"></a>Integrate Gitment in Hexo</h2><p>Let’s add a new configuration object to store our client Id and Secret. In your theme’s <code>_config.yml</code>, add:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Comments.</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="attr">gitment:</span> </span><br><span class="line">    <span class="attr">clientId:</span> <span class="string">1808dbefdea3c185dd3b</span></span><br><span class="line">    <span class="attr">clientSecret:</span> <span class="string">557be2aa0aa72bdffe0f22c683b7516166b0be28</span></span><br></pre></td></tr></table></figure><p>We now need a <code>&lt;div&gt;</code> container to tell gitment where to display the comments:</p><p>This is how I did it: (note the <code>id=&quot;gitment-comments&quot;</code>)</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="meta">%</span> <span class="keyword">if</span><span class="comment">(page.comments &amp;&amp; theme.comments &amp;&amp; theme.comments.gitment)</span>&#123; <span class="meta">%</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;gitment-comments&quot;</span>&gt;&lt;/div&gt;    </span><br><span class="line">&lt;<span class="meta">%</span> &#125; <span class="meta">%</span>&gt;</span><br></pre></td></tr></table></figure><p>and we are now ready to initialize the gitment library:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span></span><br><span class="line"><span class="javascript">    id: <span class="string">&#x27;&lt;%= page.title.replace(/[^\w\s]/gi, &#x27;</span><span class="string">&#x27;).substring(0, 49) %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    owner: <span class="string">&#x27;your-github-id&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    repo: <span class="string">&#x27;your-repo-name&#x27;</span>,</span></span><br><span class="line">    oauth: &#123;</span><br><span class="line"><span class="javascript">        client_id: <span class="string">&#x27;&lt;%= theme.comments.gitment.clientId %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        client_secret: <span class="string">&#x27;&lt;%= theme.comments.gitment.clientSecret %&gt;&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">gitment.render(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;gitment-comments&#x27;</span>));</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Important"><a href="#Important" class="headerlink" title="Important:"></a>Important:</h3><ul><li>the <code>id</code> should be a unique identifier for each post. Gitment will use it as the matching github issue name + will create one label with that id as well. Special character are not allowed and the max length is 50 chars. Make sure your use the regexp above to avoid issues down the line.</li><li>this script needs to be executed <strong>AFTER</strong> the <code>&lt;div id=&quot;gitment-comments&quot;&gt;&lt;/div&gt;</code> has rendered, so make sure you place that script tag at the end of the <code>&lt;body&gt;</code> or at least after the <code>div</code>.</li><li>Use your github hanlde as <code>owner</code></li><li>Create a repo that will be used to store the issues. Since my blog is hosted on github pages, I am using that repository.</li></ul><h2 id="Initialize-the-comments-for-each-page"><a href="#Initialize-the-comments-for-each-page" class="headerlink" title="Initialize the comments for each page"></a>Initialize the comments for each page</h2><p>At this point, deploy your blog and visit each page while logged in on github.</p><p>Click the <code>Initialize comments</code> link on each page to open a comment thread (aka create a github issue) for that particular post.</p><p>Results below ;) </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;After 2 years running disqus on my blog, I have decided to switch over to &lt;a href=&quot;https://github.com/imsun/gitment&quot;&gt;gitment&lt;/a&gt;. The spa</summary>
      
    
    
    
    
    <category term="Hexo" scheme="http://www.codeblocq.com/tags/Hexo/"/>
    
    <category term="Node" scheme="http://www.codeblocq.com/tags/Node/"/>
    
    <category term="gitment" scheme="http://www.codeblocq.com/tags/gitment/"/>
    
  </entry>
  
  <entry>
    <title>Notes on Anything You Want by Derek Sivers</title>
    <link href="http://www.codeblocq.com/2017/11/Notes-on-Anything-You-Want-by-Derek-Sivers/"/>
    <id>http://www.codeblocq.com/2017/11/Notes-on-Anything-You-Want-by-Derek-Sivers/</id>
    <published>2017-11-08T08:17:51.000Z</published>
    <updated>2018-05-06T08:49:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Big fan of Derek Sivers as I have already mentionned, I really enjoyed this short and super easy to digest <a href="https://amzn.to/2FO2Vom">book</a>.<br>It is the kind of book that you open to see what it looks like and 2 hours later (1 hours if you are not as slow as I am) you realise that you have finished it.</p><p>Through 40 stories turned lessons, Derek puts down all his learnings from creating, running and selling his internet business CD Baby.</p><p>The book is at the same time very easy to read and understand as well as packed to the brim with deep and original concepts. Derek exposes a very human, humble way to run a company, far away from the usual startup or corporate discourse. It shows that it is possible to do without investors, to respect your customers (really), and to enjoy the process of building a business (really although not always).</p><p>All in all I really appreciated how honnest the book was. I never felt like that book was over analysing, exagerating or embellishing facts like some other ‘business books’ will, mostly to increase sales.</p><p>Key Take aways</p><p>The book is packed with gems but here are a few that resonated with me:</p><ul><li><p>Never build anything nobody asked you for. There was never a business plan (in someone’s head) that resisted the first contact with a customer. You can never know what will be useful to others until someone told you they need it. Get out of your own head and go ask people what they want before spending hours and thousands of dollars building anything.</p></li><li><p>You can be the boss without having to do bossy things. If you have built a company from scratch and suddenly end up with 50 employees, chances are your responsibilities have changed quite a bit. Maybe you are a maker type of guy and now you spend 100% of your time managing employees. Well if you don’t enjoy it, you don’t have to. If what you like is programming, put someone else in place and isolate yourself to do what you like and where you will be the most useful for the organisation.</p></li><li><p>Know your north star and what you want to be. Never follow other people’s dream or society’s idea of what’s acceptable. just follow your guts and be who you want to be.</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Big fan of Derek Sivers as I have already mentionned, I really enjoyed this short and super easy to digest &lt;a href=&quot;https://amzn.to/2FO2V</summary>
      
    
    
    
    
    <category term="Business" scheme="http://www.codeblocq.com/tags/Business/"/>
    
    <category term="Books" scheme="http://www.codeblocq.com/tags/Books/"/>
    
    <category term="Self-Help" scheme="http://www.codeblocq.com/tags/Self-Help/"/>
    
  </entry>
  
  <entry>
    <title>Quicksort JavaScript Implementation</title>
    <link href="http://www.codeblocq.com/2017/10/Quicksort-JavaScript-Implementation/"/>
    <id>http://www.codeblocq.com/2017/10/Quicksort-JavaScript-Implementation/</id>
    <published>2017-10-24T21:11:32.000Z</published>
    <updated>2017-10-24T14:18:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Here is my ES6 implementation of the QuickSort Algorithm.</p><p>If you need more information on how Quicksort works, check out this <a href="https://www.youtube.com/watch?v=SLauY6PpjW4">HackerRank video</a>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> quicksort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  quicksortStep(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> quicksortStep = <span class="function">(<span class="params">arr, left, right</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> pivot = <span class="built_in">Math</span>.floor((left + right) / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">const</span> index = partition(arr, left, right, arr[pivot]);</span><br><span class="line">  quicksortStep(arr, left, index - <span class="number">1</span>);</span><br><span class="line">  quicksortStep(arr, index, right);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> partition = <span class="function">(<span class="params">arr, left, right, pivot</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">    <span class="keyword">while</span> (arr[left] &lt; pivot) &#123;</span><br><span class="line">      left = left + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (pivot &lt; arr[right]) &#123;</span><br><span class="line">      right = right - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (left &lt;= right) &#123;</span><br><span class="line">      swap(arr, left, right);</span><br><span class="line">      left = left + <span class="number">1</span>;</span><br><span class="line">      right = right - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> left;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> swap = <span class="function">(<span class="params">arr, i, j</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> temp = arr[i];</span><br><span class="line">  arr[i] = arr[j];</span><br><span class="line">  arr[j] = temp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>];</span><br><span class="line">quicksort(arr1);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = [];</span><br><span class="line">quicksort(arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="number">3</span>];</span><br><span class="line">quicksort(arr3);</span><br><span class="line"><span class="built_in">console</span>.log(arr3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr4 = [<span class="number">4</span>,<span class="number">3</span>];</span><br><span class="line">quicksort(arr4);</span><br><span class="line"><span class="built_in">console</span>.log(arr4);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr5 = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>];</span><br><span class="line">quicksort(arr5);</span><br><span class="line"><span class="built_in">console</span>.log(arr5);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Here is my ES6 implementation of the QuickSort Algorithm.&lt;/p&gt;
&lt;p&gt;If you need more information on how Quicksort works, check out this &lt;a h</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://www.codeblocq.com/tags/JavaScript/"/>
    
    <category term="leet" scheme="http://www.codeblocq.com/tags/leet/"/>
    
    <category term="Sorting" scheme="http://www.codeblocq.com/tags/Sorting/"/>
    
  </entry>
  
</feed>
