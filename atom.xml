<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodeBlocQ</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.codeblocq.com/"/>
  <updated>2020-01-12T12:39:37.497Z</updated>
  <id>http://www.codeblocq.com/</id>
  
  <author>
    <name>Jonathan Klughertz</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A-Star Pathfinding React Demo</title>
    <link href="http://www.codeblocq.com/2020/01/A-Star-Pathfinding-React-Demo/"/>
    <id>http://www.codeblocq.com/2020/01/A-Star-Pathfinding-React-Demo/</id>
    <published>2020-01-11T16:14:07.000Z</published>
    <updated>2020-01-12T12:39:37.497Z</updated>
    
    <content type="html"><![CDATA[<p>Check out the <a href="http://a-star-pathfinding.codeblocq.com/" target="_blank" rel="external">demo here</a>.</p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>The A-Star Pathfinding algorithm finds the shortest path in between 2 points while avoiding obstacles.</p>
<h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><p>To understand how the algorithm works, I highly recommend the following video by Sebastian Lague:</p>
<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/-L-WgKMFuhE" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h2 id="Explanations"><a href="#Explanations" class="headerlink" title="Explanations"></a>Explanations</h2><h3 id="The-basic-logic-is-pretty-straightforward"><a href="#The-basic-logic-is-pretty-straightforward" class="headerlink" title="The basic logic is pretty straightforward:"></a>The basic logic is pretty straightforward:</h3><p>For each cell around the start node, calculate 3 properties:</p>
<ul>
<li>The distance from the start node - commonly called <code>G Cost</code></li>
<li>The distance from to the end node - commonly called <code>H Cost</code></li>
<li>The sum of the two - commonly called <code>F Cost = G Cost + H Cost</code></li>
</ul>
<p>Then pick the node with the lowest <code>F Cost</code> amongst all the nodes and start the process again. When finding the next node to use as a pivot, consider the newly calculated nodes and the previous ones as well.</p>
<p>If there is a path, it should eventually be reached. Otherwise eject !</p>
<h3 id="The-part-that-is-a-bit-trickier"><a href="#The-part-that-is-a-bit-trickier" class="headerlink" title="The part that is a bit trickier:"></a>The part that is a bit trickier:</h3><p>The distance from the start for a new Node A is equal to the distance in between Node A and its parent + the distance in between that parent and the start node <u>and not the absolute distance from the start node.</u></p>
<p>This is important as otherwise, obstacles would not be taken into account.</p>
<p>This has 2 consequences: </p>
<ul>
<li>When computing a new node, the parent node needs to be saved as well. This will form a <a href="/2016/05/ES6-ES2015-LinkedList-Implementation/">linked list</a> of sorts that will save the whole path information from the start.</li>
<li>When looking at the neighbooring nodes, always check the already computed nodes as well and see if a smaller <code>G Cost</code> can be found <u>through the current node</u>. If that is the case, the <code>G Cost</code>, <code>F Cost</code> and parent need to be updated for that neighbooring node with the new best path information.</li>
</ul>
<p>When using the app I have created, you can hover over the cells to checkout the different properties that were computed.</p>
<h2 id="Pseudo-Code-based-on-my-implementation"><a href="#Pseudo-Code-based-on-my-implementation" class="headerlink" title="Pseudo Code based on my implementation"></a>Pseudo Code based on my implementation</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">create an OPEN list that will hold the computed nodes</div><div class="line">create a GRID of cells with properties ↵</div><div class="line">  including (fCost, gCost, hCost, parentNode, isClosed, xCoordinate, yCoordinate)</div><div class="line">  </div><div class="line">insert the start node into the OPEN list</div><div class="line">  </div><div class="line">while there are nodes inside OPEN // Main loop</div><div class="line">  take the node inside OPEN with the smallest fCost -&gt; CURRENT</div><div class="line"></div><div class="line">  if CURRENT is the END node</div><div class="line">    go back through the parents to compute the path and return. It's done</div><div class="line">  </div><div class="line">  remove CURRENT from the OPEN list</div><div class="line">  set the GRID cell with the CURRENT coordinates to isClosed = true</div><div class="line">  </div><div class="line">  for each NEIGHBOR of CURRENT</div><div class="line">    if NEIGHBOR is blocked by an obstacle, a closed cell or out of bounds</div><div class="line">      move on to the next NEIGHBOR</div><div class="line">    </div><div class="line">    calculate the gCost for NEIGHBOR which is gCost of CURRENT + distance to NEIGHBOR ↵</div><div class="line">      (distance 1 if in a straight line or sqrt(2) ~ 1.4 if in a diagonal)</div><div class="line">  </div><div class="line">    if NEIGHBOR is not in OPEN</div><div class="line">      add it to OPEN and set the rest of its properties (hCost, fCost and parent)</div><div class="line">    else if NEIGHBOR is in OPEN but the new gCost is smaller than the existing node</div><div class="line">      update the gCost, fCost and parent of that node</div></pre></td></tr></table></figure>
<p>The TypeScript implementation is available <a href="https://github.com/klugjo/a-star-react/blob/master/src/algorithm.ts" target="_blank" rel="external">here</a> and the full code is available on <a href="https://github.com/klugjo/a-star-react" target="_blank" rel="external">GitHub</a></p>
<p>Thanks for reading :)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Check out the &lt;a href=&quot;http://a-star-pathfinding.codeblocq.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Introduction&quot;&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.codeblocq.com/tags/JavaScript/"/>
    
      <category term="React" scheme="http://www.codeblocq.com/tags/React/"/>
    
      <category term="Algorithm" scheme="http://www.codeblocq.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>My Free and Open Source Expense Tracker App is on the App Store</title>
    <link href="http://www.codeblocq.com/2019/11/KlugSaver-My-Free-and-Open-Source-Expense-Tracker-App/"/>
    <id>http://www.codeblocq.com/2019/11/KlugSaver-My-Free-and-Open-Source-Expense-Tracker-App/</id>
    <published>2019-11-10T09:16:49.000Z</published>
    <updated>2019-11-10T02:45:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have spent a good chunk of the beginning of this year developing my first React Native app.</p>
<p>You can download it on the <a href="https://apps.apple.com/ph/app/klug-saver/id1467169332" target="_blank" rel="external">Apple App Store</a> if you are on iOS.</p>
<p>You can also check out the <a href="https://www.klugsaver.com/" target="_blank" rel="external">website</a>.</p>
<h2 id="Tech"><a href="#Tech" class="headerlink" title="Tech"></a>Tech</h2><p>The app is written in <a href="https://facebook.github.io/react-native/" target="_blank" rel="external">React Native</a> using <a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a> and <a href="https://redux.js.org/introduction/getting-started" target="_blank" rel="external">Redux</a>.</p>
<p>For privacy reasons, all the user’s expenses are saved on the device itself, with the possibility to back it up in <a href="https://www.dropbox.com/" target="_blank" rel="external">DropBox</a>.</p>
<p>The website is hosted on <a href="https://www.netlify.com" target="_blank" rel="external">Netlify</a>.</p>
<p>The code is available on <a href="https://github.com/klugjo/klug-saver" target="_blank" rel="external">GitHub</a></p>
<h2 id="Vision"><a href="#Vision" class="headerlink" title="Vision"></a>Vision</h2><p>I wanted to find a simple way to log my expenses and have a quick look at where my money goes, month by month. I found it scary that most of the highly rated apps on the App Store would ask for my personal information before I can start logging expenses or even ask me to link my bank account.</p>
<p>So I have built this app for fun and my own usage. I have been using it everyday for about a year and it has been super helpful. A few friends have been using it as well and the feedback has been good.</p>
<h2 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h2><p>I had never worked with React Native before and here are some high level thoughts.</p>
<ul>
<li>If you are building more than a prototype, eject from <a href="https://expo.io/" target="_blank" rel="external">Expo</a> ASAP. There are too many limitations and perfomance issues.</li>
<li>Setting up TypeScript was a bit tedious, at the time I could not find any boilerplate that worked for me and ended up doing it the hard way and setting up everything from scratch. Feel free to have a look at my project and reuse my setup.</li>
<li>Same thing for Jest and Enzyme, not straight forward but now it works like a charm.</li>
<li>I started by looking at some UI libraries like I would do for a React Web project. Most of them are really limited or not free. The ecosystem is definitely not as vibrant as React for the web. React Native flexbox works differently than on the web, <a href="http://flexbox.buildwithreact.com/" target="_blank" rel="external">http://flexbox.buildwithreact.com/</a> was super helpful during development.</li>
<li>I have enountered very limited performance issues and would definitely use React Native again if I had to develop another app. As a mostly React developer in my day job, using React Native was an absolute delight.</li>
</ul>
<p>Once again, thanks for reading and if you happen to use the app and have any feedback, <a href="https://forms.gle/XU76tnDUzgVnjXHM8" target="_blank" rel="external">Send it Here</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have spent a good chunk of the beginning of this year developing my first React Native app.&lt;/p&gt;
&lt;p&gt;You can download it on the &lt;a href=&quot;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.codeblocq.com/tags/JavaScript/"/>
    
      <category term="React" scheme="http://www.codeblocq.com/tags/React/"/>
    
      <category term="KlugSaver" scheme="http://www.codeblocq.com/tags/KlugSaver/"/>
    
      <category term="React Native" scheme="http://www.codeblocq.com/tags/React-Native/"/>
    
      <category term="iOS" scheme="http://www.codeblocq.com/tags/iOS/"/>
    
      <category term="TypeScript" scheme="http://www.codeblocq.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>How to start a tech company as a non technical individual</title>
    <link href="http://www.codeblocq.com/2018/06/How-to-start-a-tech-compnay-as-a-non-technical-individual/"/>
    <id>http://www.codeblocq.com/2018/06/How-to-start-a-tech-compnay-as-a-non-technical-individual/</id>
    <published>2018-06-23T08:20:33.000Z</published>
    <updated>2018-06-23T02:57:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>As a software engineer, I have had countless coffees and meetings with non technical “co founders” that want to build an app, website or platform of some sort. Their budgets go from a few hundreds to more than 50K USD for some. They almost always have great ideas and execution plans, except when it comes to the tech.</p>
<p>After spending hours discussing these things, here are my thoughts, conclusions and reflections. Hoping it might help some of you.</p>
<blockquote><p>TLDR; if you don’t have any (signed, paying) customers and you only have a business idea, you don’t need an app or a website. An email, a phone and a Google spreadsheet is all you need. If an online presence is necessary, 50 bucks should be your maximum spend. Also software developers are difficult to deal with and once you own a system, you will have to pay constant maintenance fees.</p>
</blockquote>
<p>Let’s have a look at how you would start a ride sharing company (Uber, Grab, Lyft …) without even talking to a single software engineer.</p>
<p>First thing you might think is that you need an app. Wrong, all you need are drivers and passengers. If it’s you and another co founder you can scale up to a few hundred rides a day with zero tech.</p>
<h3 id="Here-is-what-you-need"><a href="#Here-is-what-you-need" class="headerlink" title="Here is what you need:"></a>Here is what you need:</h3><ul>
<li>A big map of the city you are in</li>
<li>Some pins</li>
<li>Phones</li>
<li>Google Forms</li>
<li>Social Media and Forums</li>
</ul>
<h3 id="Here-is-your-setup"><a href="#Here-is-your-setup" class="headerlink" title="Here is your setup:"></a>Here is your setup:</h3><ul>
<li>Start with whatever medium you think is best to build your audience and find your first customers (FB page, LinkedIn group, word of mouth, depending on what makes sense for you).</li>
<li>Setup a <a href="https://www.google.com/forms/about/" target="_blank" rel="external">Google Form</a> with 4 fields: Name, Phone, Location, Destination.</li>
<li>Link to that Google Form from your FB page.</li>
<li>Advertise around and go talk to potential riders and ask them to try your service. Online, offline.</li>
</ul>
<h3 id="Here-is-your-execution-plan"><a href="#Here-is-your-execution-plan" class="headerlink" title="Here is your execution plan:"></a>Here is your execution plan:</h3><ul>
<li>When your first customer posts his itinerary using the Google Form, pick up the phone and call him to know exactly where he is and brief him on the driver that will pick him up and how long until he is there. Obviously you will need a driver available or go drive there yourself.</li>
<li>Whenever a driver drops a passenger, ask him to stay put and place a pin on the map at his location.</li>
<li>Wait for another passenger and keep on going and growing this way.</li>
<li>When you are running out of pins or your map is too small, time to look at scaling and adding in more tech. Until then, focus on hiring more drivers, getting more passengers. Learn as much as possible along the way. Learn about everyone’s motivations, difficulties, adjust your prices, develop your brand and make your first customers as happy as possible.</li>
<li>Invest all that money you had saved up for an app in company swag, free rides, driver incentives, marketing and things that add value to your customers and will help them remember you.</li>
</ul>
<h3 id="Advantages"><a href="#Advantages" class="headerlink" title="Advantages:"></a>Advantages:</h3><ul>
<li>You can get started NOW! You can probably achieve all this in a few weeks and get your first passenger in 24 hours. How amazing is that. If you were to develop an app, it might take you 6 months and more than 50,000 dollars to get there. Plus people don’t download apps, so you would have to go back to the Google Form solution anyways.</li>
<li>You have done everything yourself and you understand everything that is going on. They say that there is not a single business plan that survived the first customer. That app idea you have in your head is probably not gonna work in the way you think it will. Focus on learning about your customers and developing a manual system. Once you have a well oiled process, progressively automate the most boring and repetitive tasks.</li>
<li>The day you need a software engineer, instead of sheepishly asking them out for coffee and wasting your time talking about how apps, AI and bots are gonna change the world, show them what you have done. I can guarantee you they will love it and will get started the day itself.</li>
</ul>
<h3 id="How-to-start-introducing-some-tech"><a href="#How-to-start-introducing-some-tech" class="headerlink" title="How to start introducing some tech:"></a>How to start introducing some tech:</h3><p>(Once again, as tempting as it seems, don’t start here if you haven’t done the first steps, you’d just be procrastinating. Don’t optimize prematurely and until you have validated your assumptions IRL)</p>
<ul>
<li>Invest 20 bucks in a logo.</li>
<li>Replace the Google Form with a landing page and custom form. Most 12 years olds of today should be able to do that for your. Ask your cousin. 50 bucks max.</li>
<li>Get a domain name. 15 bucks a year.</li>
<li>Get web hosting. 10-20 bucks a year.</li>
<li>Scale where it hurts, if your map is too small get a bigger one or start using google maps and Excel. This should get you to a thousand rides a day.</li>
<li>Only then should you start talking to devs. Get someone good. A senior engineer with ~10 yrs experience should only cost you double what a young grad would. But the outcome will be a different order of magnitude. Most important, find someone you trust because the tech will soon become a black box and you’ll have no clue what is going on.</li>
</ul>
<h3 id="Things-you-don’t-need-unless-you-are-already-an-expert-in-that-space-and-that’s-where-you-want-to-operate"><a href="#Things-you-don’t-need-unless-you-are-already-an-expert-in-that-space-and-that’s-where-you-want-to-operate" class="headerlink" title="Things you don’t need (unless you are already an expert in that space and that’s where you want to operate):"></a>Things you don’t need (unless you are already an expert in that space and that’s where you want to operate):</h3><ul>
<li>AI</li>
<li>Bots</li>
<li>VR</li>
<li>Apps and websites</li>
<li>SMS Apis</li>
<li>Image recognition</li>
<li>Blockchain</li>
</ul>
<h3 id="If-you-are-technical-founder"><a href="#If-you-are-technical-founder" class="headerlink" title="If you are technical founder:"></a>If you are technical founder:</h3><p><strong>SAME RULES APPLY</strong>. If you are starting a consumer startup in a space you are not super familiar with, begin with helping your co founder do all these things that don’t scale. There is no need to start thinking about database engines and multi leader replication at this point. Learn the domain first.</p>
<p>Hope that helps. This stuff isn’t new but in case you needed to hear it from me, here it is 😉</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;As a software engineer, I have had countless coffees and meetings with non technical “co founders” that want to build an app, website or 
    
    </summary>
    
    
      <category term="Startups" scheme="http://www.codeblocq.com/tags/Startups/"/>
    
      <category term="Business" scheme="http://www.codeblocq.com/tags/Business/"/>
    
      <category term="General" scheme="http://www.codeblocq.com/tags/General/"/>
    
  </entry>
  
  <entry>
    <title>Setup gitment on your Hexo blog</title>
    <link href="http://www.codeblocq.com/2018/05/Setup-gitment-on-your-Hexo-blog/"/>
    <id>http://www.codeblocq.com/2018/05/Setup-gitment-on-your-Hexo-blog/</id>
    <published>2018-05-27T08:33:31.000Z</published>
    <updated>2018-05-28T12:36:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>After 2 years running disqus on my blog, I have decided to switch over to <a href="https://github.com/imsun/gitment" target="_blank" rel="external">gitment</a>. The spam and slowness of Disqus is what drove me away from it. Plus no more ads for users.</p>
<p>Gitment is a small JS library that leverages on Github issues to store comments for each post: </p>
<ul>
<li>Each post will have a matching Github issue (<a href="https://github.com/klugjo/klugjo.github.io/issues" target="_blank" rel="external">example for this blog</a>). </li>
<li>Users will have to be logged in to github to post. </li>
<li>Comments are saved as github comments on each issue/post</li>
<li>Gitment takes care of displaying a form that allows users to see/post comments</li>
</ul>
<p>Let’s get started.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>You can use the hosted libraries:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://imsun.github.io/gitment/style/default.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://imsun.github.io/gitment/dist/gitment.browser.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>or build them yourself </p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git clone git@github<span class="selector-class">.com</span>:imsun/gitment<span class="selector-class">.git</span></div><div class="line">cd gitment</div><div class="line">npm install</div><div class="line">npm build</div></pre></td></tr></table></figure>
<p>Once you are sure that <code>gitment.browser.js</code> and <code>default.css</code> are present on your site, let’s move on to the setup.</p>
<h2 id="Setup-Github"><a href="#Setup-Github" class="headerlink" title="Setup Github"></a>Setup Github</h2><p>First of all we are going to need an OAuth application.</p>
<ul>
<li><a href="https://github.com/settings/applications/new" target="_blank" rel="external">Click here</a> to register an OAuth application.</li>
<li>Save the client ID and client secret somewhere.</li>
<li>For the callback URL, use the same domain as your blog (I am using <a href="http://www.codeblocq.com/">http://www.codeblocq.com/</a>).</li>
</ul>
<h2 id="Integrate-Gitment-in-Hexo"><a href="#Integrate-Gitment-in-Hexo" class="headerlink" title="Integrate Gitment in Hexo"></a>Integrate Gitment in Hexo</h2><p>Let’s add a new configuration object to store our client Id and Secret. In your theme’s <code>_config.yml</code>, add:</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Comments.</span></div><div class="line"><span class="attr">comments:</span></div><div class="line"><span class="attr">  gitment:</span> </div><div class="line"><span class="attr">    clientId:</span> <span class="number">1808</span>dbefdea3c185dd3b</div><div class="line"><span class="attr">    clientSecret:</span> <span class="number">557</span>be2aa0aa72bdffe0f22c683b7516166b0be28</div></pre></td></tr></table></figure>
<p>We now need a <code>&lt;div&gt;</code> container to tell gitment where to display the comments:</p>
<p>This is how I did it: (note the <code>id=&quot;gitment-comments&quot;</code>)</p>
<figure class="highlight erb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">if</span>(page.comments &amp;&amp; theme.comments &amp;&amp; theme.comments.gitment)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gitment-comments"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </div><div class="line"><span class="tag">&lt;<span class="name">%</span></span><span class="ruby"> &#125; </span><span class="xml"><span class="tag">%&gt;</span></span></div></pre></td></tr></table></figure>
<p>and we are now ready to initialize the gitment library:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">const</span> gitment = <span class="keyword">new</span> Gitment(&#123;</div><div class="line">    <span class="attr">id</span>: <span class="string">'&lt;%= page.title.replace(/[^\w\s]/gi, '</span><span class="string">').substring(0, 49) %&gt;'</span>,</div><div class="line">    <span class="attr">owner</span>: <span class="string">'your-github-id'</span>,</div><div class="line">    <span class="attr">repo</span>: <span class="string">'your-repo-name'</span>,</div><div class="line">    <span class="attr">oauth</span>: &#123;</div><div class="line">        <span class="attr">client_id</span>: <span class="string">'&lt;%= theme.comments.gitment.clientId %&gt;'</span>,</div><div class="line">        <span class="attr">client_secret</span>: <span class="string">'&lt;%= theme.comments.gitment.clientSecret %&gt;'</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gitment.render(<span class="built_in">document</span>.getElementById(<span class="string">'gitment-comments'</span>));</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Important"><a href="#Important" class="headerlink" title="Important:"></a>Important:</h3><ul>
<li>the <code>id</code> should be a unique identifier for each post. Gitment will use it as the matching github issue name + will create one label with that id as well. Special character are not allowed and the max length is 50 chars. Make sure your use the regexp above to avoid issues down the line.</li>
<li>this script needs to be executed <strong>AFTER</strong> the <code>&lt;div id=&quot;gitment-comments&quot;&gt;&lt;/div&gt;</code> has rendered, so make sure you place that script tag at the end of the <code>&lt;body&gt;</code> or at least after the <code>div</code>.</li>
<li>Use your github hanlde as <code>owner</code></li>
<li>Create a repo that will be used to store the issues. Since my blog is hosted on github pages, I am using that repository.</li>
</ul>
<h2 id="Initialize-the-comments-for-each-page"><a href="#Initialize-the-comments-for-each-page" class="headerlink" title="Initialize the comments for each page"></a>Initialize the comments for each page</h2><p>At this point, deploy your blog and visit each page while logged in on github.</p>
<p>Click the <code>Initialize comments</code> link on each page to open a comment thread (aka create a github issue) for that particular post.</p>
<p>Results below ;) </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;After 2 years running disqus on my blog, I have decided to switch over to &lt;a href=&quot;https://github.com/imsun/gitment&quot; target=&quot;_blank&quot; rel=
    
    </summary>
    
    
      <category term="Hexo" scheme="http://www.codeblocq.com/tags/Hexo/"/>
    
      <category term="Node" scheme="http://www.codeblocq.com/tags/Node/"/>
    
      <category term="gitment" scheme="http://www.codeblocq.com/tags/gitment/"/>
    
  </entry>
  
  <entry>
    <title>Notes on Anything You Want by Derek Sivers</title>
    <link href="http://www.codeblocq.com/2017/11/Notes-on-Anything-You-Want-by-Derek-Sivers/"/>
    <id>http://www.codeblocq.com/2017/11/Notes-on-Anything-You-Want-by-Derek-Sivers/</id>
    <published>2017-11-08T07:17:51.000Z</published>
    <updated>2018-05-06T08:49:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Big fan of Derek Sivers as I have already mentionned, I really enjoyed this short and super easy to digest <a href="https://amzn.to/2FO2Vom" target="_blank" rel="external">book</a>.<br>It is the kind of book that you open to see what it looks like and 2 hours later (1 hours if you are not as slow as I am) you realise that you have finished it.</p>
<p>Through 40 stories turned lessons, Derek puts down all his learnings from creating, running and selling his internet business CD Baby.</p>
<p>The book is at the same time very easy to read and understand as well as packed to the brim with deep and original concepts. Derek exposes a very human, humble way to run a company, far away from the usual startup or corporate discourse. It shows that it is possible to do without investors, to respect your customers (really), and to enjoy the process of building a business (really although not always).</p>
<p>All in all I really appreciated how honnest the book was. I never felt like that book was over analysing, exagerating or embellishing facts like some other ‘business books’ will, mostly to increase sales.</p>
<p>Key Take aways</p>
<p>The book is packed with gems but here are a few that resonated with me:</p>
<ul>
<li><p>Never build anything nobody asked you for. There was never a business plan (in someone’s head) that resisted the first contact with a customer. You can never know what will be useful to others until someone told you they need it. Get out of your own head and go ask people what they want before spending hours and thousands of dollars building anything.</p>
</li>
<li><p>You can be the boss without having to do bossy things. If you have built a company from scratch and suddenly end up with 50 employees, chances are your responsibilities have changed quite a bit. Maybe you are a maker type of guy and now you spend 100% of your time managing employees. Well if you don’t enjoy it, you don’t have to. If what you like is programming, put someone else in place and isolate yourself to do what you like and where you will be the most useful for the organisation.</p>
</li>
<li><p>Know your north star and what you want to be. Never follow other people’s dream or society’s idea of what’s acceptable. just follow your guts and be who you want to be.</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Big fan of Derek Sivers as I have already mentionned, I really enjoyed this short and super easy to digest &lt;a href=&quot;https://amzn.to/2FO2V
    
    </summary>
    
    
      <category term="Business" scheme="http://www.codeblocq.com/tags/Business/"/>
    
      <category term="Books" scheme="http://www.codeblocq.com/tags/Books/"/>
    
      <category term="Self-Help" scheme="http://www.codeblocq.com/tags/Self-Help/"/>
    
  </entry>
  
  <entry>
    <title>Quicksort JavaScript Implementation</title>
    <link href="http://www.codeblocq.com/2017/10/Quicksort-JavaScript-Implementation/"/>
    <id>http://www.codeblocq.com/2017/10/Quicksort-JavaScript-Implementation/</id>
    <published>2017-10-24T20:11:32.000Z</published>
    <updated>2017-10-24T14:18:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Here is my ES6 implementation of the QuickSort Algorithm.</p>
<p>If you need more information on how Quicksort works, check out this <a href="https://www.youtube.com/watch?v=SLauY6PpjW4" target="_blank" rel="external">HackerRank video</a>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> quicksort = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</div><div class="line">  quicksortStep(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> quicksortStep = <span class="function">(<span class="params">arr, left, right</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (left &gt;= right) &#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">const</span> pivot = <span class="built_in">Math</span>.floor((left + right) / <span class="number">2</span>);</div><div class="line">  <span class="keyword">const</span> index = partition(arr, left, right, arr[pivot]);</div><div class="line">  quicksortStep(arr, left, index - <span class="number">1</span>);</div><div class="line">  quicksortStep(arr, index, right);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> partition = <span class="function">(<span class="params">arr, left, right, pivot</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">while</span> (left &lt;= right) &#123;</div><div class="line">    <span class="keyword">while</span> (arr[left] &lt; pivot) &#123;</div><div class="line">      left = left + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span> (pivot &lt; arr[right]) &#123;</div><div class="line">      right = right - <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (left &lt;= right) &#123;</div><div class="line">      swap(arr, left, right);</div><div class="line">      left = left + <span class="number">1</span>;</div><div class="line">      right = right - <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> left;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> swap = <span class="function">(<span class="params">arr, i, j</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> temp = arr[i];</div><div class="line">  arr[i] = arr[j];</div><div class="line">  arr[j] = temp;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> arr1 = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>];</div><div class="line">quicksort(arr1);</div><div class="line"><span class="built_in">console</span>.log(arr1);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">const</span> arr2 = [];</div><div class="line">quicksort(arr2);</div><div class="line"><span class="built_in">console</span>.log(arr2);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">const</span> arr3 = [<span class="number">3</span>];</div><div class="line">quicksort(arr3);</div><div class="line"><span class="built_in">console</span>.log(arr3);</div><div class="line"></div><div class="line"><span class="keyword">const</span> arr4 = [<span class="number">4</span>,<span class="number">3</span>];</div><div class="line">quicksort(arr4);</div><div class="line"><span class="built_in">console</span>.log(arr4);</div><div class="line"></div><div class="line"><span class="keyword">const</span> arr5 = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>];</div><div class="line">quicksort(arr5);</div><div class="line"><span class="built_in">console</span>.log(arr5);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Here is my ES6 implementation of the QuickSort Algorithm.&lt;/p&gt;
&lt;p&gt;If you need more information on how Quicksort works, check out this &lt;a h
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.codeblocq.com/tags/JavaScript/"/>
    
      <category term="leet" scheme="http://www.codeblocq.com/tags/leet/"/>
    
      <category term="Sorting" scheme="http://www.codeblocq.com/tags/Sorting/"/>
    
  </entry>
  
  <entry>
    <title>How to receive messages from web sockets using redux-saga</title>
    <link href="http://www.codeblocq.com/2017/08/How-to-receive-messages-from-web-sockets-using-redux-saga/"/>
    <id>http://www.codeblocq.com/2017/08/How-to-receive-messages-from-web-sockets-using-redux-saga/</id>
    <published>2017-08-02T19:17:33.000Z</published>
    <updated>2017-08-08T13:21:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have just had to implement this and found it hard to come across a simple working solution out there.</p>
<p>So here is mine:</p>
<h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>Let’s consider the following <code>WebSocket</code> object:</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> mySocket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://www.xyz.com/socketServer"</span>, <span class="string">"protocol"</span>);</div></pre></td></tr></table></figure>
<p>We can listen to incoming messages with</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mySocket.onmessage = <span class="function"><span class="params">(message)</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(message.data);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>and close the websocket with</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mySocket.close()<span class="comment">;</span></div></pre></td></tr></table></figure>
<h2 id="Setup-redux-saga"><a href="#Setup-redux-saga" class="headerlink" title="Setup redux-saga"></a>Setup redux-saga</h2><p>To listen recurring events, saga provides an <a href="https://github.com/redux-saga/redux-saga/blob/master/docs/advanced/Channels.md" target="_blank" rel="external">eventChannel</a> object.</p>
<h3 id="Basic-usage"><a href="#Basic-usage" class="headerlink" title="Basic usage"></a>Basic usage</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1- Create a channel that listens to messages from the server</span></div><div class="line"><span class="keyword">const</span> channel = <span class="function"><span class="keyword">yield</span> <span class="title">call</span>(<span class="params">createEventChannel</span>)</span>;</div><div class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">  <span class="comment">// 2- wait for the next message from the server</span></div><div class="line">  <span class="keyword">const</span> &#123;message&#125; = <span class="function"><span class="keyword">yield</span> <span class="title">take</span>(<span class="params"> channel</span>)</span>;</div><div class="line">  <span class="comment">// 3- Send the message payload to the reducer</span></div><div class="line">  <span class="function"><span class="keyword">yield</span> <span class="title">put</span>(<span class="params">&#123;type: WEBSOCKET_MESSAGE_RECEIVED, message&#125;</span>)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Once the channel is created (we will get there in a second), we can use <code>yield take(channel)</code> to listen to the message received. By putting that call in a <code>while(true) {...}</code> loop we can be listening to messages forever.</p>
<h3 id="Create-the-Event-Channel"><a href="#Create-the-Event-Channel" class="headerlink" title="Create the Event Channel"></a>Create the Event Channel</h3><p>The eventChannel takes a callback parameter with an emit argument to put messages onto the <code>eventChannel</code>. This callback function should return another function to be executed when the connection is closed.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createEventChannel</span> (<span class="params">socket</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> eventChannel(<span class="function"><span class="params">emit</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">// call emit when a message is received</span></div><div class="line">    mySocket.onmessage(<span class="function">(<span class="params">message</span>) =&gt;</span> emit(message.data));</div><div class="line"></div><div class="line">    <span class="comment">// Return a function to be called when done listening</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      mySocket.close();</div><div class="line">    &#125;;</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Plug in that function in the example above and you are ready to go.</p>
<h2 id="Full-Working-Example"><a href="#Full-Working-Example" class="headerlink" title="Full Working Example"></a>Full Working Example</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// mySaga.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;takeEvery, eventChannel&#125; <span class="keyword">from</span> <span class="string">'redux-saga'</span>;</div><div class="line"><span class="keyword">import</span> &#123;put, call, take&#125; <span class="keyword">from</span> <span class="string">'redux-saga/effects'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;INITIALIZE_WEB_SOCKETS_CHANNEL, WEBSOCKET_MESSAGE_RECEIVED&#125; <span class="keyword">from</span> <span class="string">'../actions'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">createEventChannel</span>(<span class="params">mySocket</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> eventChannel(<span class="function"><span class="params">emit</span> =&gt;</span> &#123;</div><div class="line">    mySocket.onmessage(<span class="function">(<span class="params">message</span>) =&gt;</span> emit(message.data));</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      mySocket.close();</div><div class="line">    &#125;;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">initializeWebSocketsChannel</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> mySocket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://www.xyz.com/socketServer"</span>, <span class="string">"protocol"</span>);</div><div class="line">  <span class="keyword">const</span> channel = <span class="keyword">yield</span> call(createEventChannel, mySocket);</div><div class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">    <span class="keyword">const</span> &#123;message&#125; = <span class="keyword">yield</span> take(channel);</div><div class="line">    <span class="keyword">yield</span> put(&#123;<span class="attr">type</span>: WEBSOCKET_MESSAGE_RECEIVED, message&#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span>* <span class="title">mySaga</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> [</div><div class="line">    takeEvery(<span class="string">'INITIALIZE_WEB_SOCKETS_CHANNEL'</span>, initializeWebSocketsChannel)</div><div class="line">  ];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Hope that helps !</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have just had to implement this and found it hard to come across a simple working solution out there.&lt;/p&gt;
&lt;p&gt;So here is mine:&lt;/p&gt;
&lt;h2 i
    
    </summary>
    
    
      <category term="redux" scheme="http://www.codeblocq.com/tags/redux/"/>
    
      <category term="saga" scheme="http://www.codeblocq.com/tags/saga/"/>
    
      <category term="websockets" scheme="http://www.codeblocq.com/tags/websockets/"/>
    
  </entry>
  
  <entry>
    <title>Save All by Default in VSCode</title>
    <link href="http://www.codeblocq.com/2017/03/Save-All-by-Default-in-VSCode/"/>
    <id>http://www.codeblocq.com/2017/03/Save-All-by-Default-in-VSCode/</id>
    <published>2017-03-27T20:09:10.000Z</published>
    <updated>2017-03-27T14:14:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>By Default VSCode only saves the current file when hitting Ctrl+S. Over time, I got used to Ctrl+S saving all the modified files in the project. Here is how to setup the same behavior in VSCode.</p>
<p>Go to</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">File</span> &gt; Preferences &gt; <span class="built_in">Keyboard</span> Shortcuts</div></pre></td></tr></table></figure>
<p>In the <code>keybindings.json</code> where you can put your overrides, use the following:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123; <span class="attr">"key"</span>: <span class="string">"ctrl+k s"</span>, <span class="attr">"command"</span>: <span class="string">"workbench.action.files.save"</span> &#125;,</div><div class="line">    &#123; <span class="attr">"key"</span>: <span class="string">"ctrl+s"</span>, <span class="attr">"command"</span>: <span class="string">"workbench.action.files.saveAll"</span> &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>This will invert the shortcuts for the <code>Save</code> and <code>Save All</code> actions. From now on, <code>Ctrl+S</code> will save all the modified files.</p>
<p>Such a time saver when refreshing your build only to realise you forgot to save one of the files ;)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;By Default VSCode only saves the current file when hitting Ctrl+S. Over time, I got used to Ctrl+S saving all the modified files in the p
    
    </summary>
    
    
      <category term="VSCode" scheme="http://www.codeblocq.com/tags/VSCode/"/>
    
      <category term="Tools" scheme="http://www.codeblocq.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Configure Jest Test Location</title>
    <link href="http://www.codeblocq.com/2017/02/Configure-Jest-Test-Location/"/>
    <id>http://www.codeblocq.com/2017/02/Configure-Jest-Test-Location/</id>
    <published>2017-02-25T22:44:03.000Z</published>
    <updated>2017-03-02T13:20:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>Quick article to help look at the right place when configuring your tests in Jest.</p>
<h2 id="Default-test-files-location"><a href="#Default-test-files-location" class="headerlink" title="Default test files location"></a>Default test files location</h2><p>The first time I read through the configuration I thought that the paths to my tests were configured using <a href="https://facebook.github.io/jest/docs/configuration.html#testpathdirs-array-string" target="_blank" rel="external">testPathDirs
</a>. It turns out that this property is only used to restraint the places Jest will look for tests to sub modules.</p>
<p>The important thing to note is that by default:</p>
<p><strong>Jest will look for <code>’js</code> and <code>.jsx</code> files inside of <code>__tests__</code> folders.</strong></p>
<h2 id="Use-a-custom-location"><a href="#Use-a-custom-location" class="headerlink" title="Use a custom location"></a>Use a custom location</h2><p>This is the <em>default</em> that needs to change. To do so, use <a href="https://facebook.github.io/jest/docs/configuration.html#testregex-string" target="_blank" rel="external">testRegex</a>.</p>
<p>For example, if you want to store all your test files inside a <code>./tests</code> folder, the only jest configuration option you are going to need is:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">“jest”: &#123;</div><div class="line">  <span class="string">"testRegex"</span>: <span class="string">"tests/.*\\.(js|jsx)$"</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Quick article to help look at the right place when configuring your tests in Jest.&lt;/p&gt;
&lt;h2 id=&quot;Default-test-files-location&quot;&gt;&lt;a href=&quot;#Def
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.codeblocq.com/tags/JavaScript/"/>
    
      <category term="React" scheme="http://www.codeblocq.com/tags/React/"/>
    
      <category term="Jest" scheme="http://www.codeblocq.com/tags/Jest/"/>
    
      <category term="Unit Tests" scheme="http://www.codeblocq.com/tags/Unit-Tests/"/>
    
  </entry>
  
  <entry>
    <title>Notes on Turning Pro by Steven Pressfield</title>
    <link href="http://www.codeblocq.com/2017/02/Notes-on-Turning-Pro-by-Steven-Pressfield/"/>
    <id>http://www.codeblocq.com/2017/02/Notes-on-Turning-Pro-by-Steven-Pressfield/</id>
    <published>2017-02-23T21:20:36.000Z</published>
    <updated>2018-05-16T23:52:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="First-impressions"><a href="#First-impressions" class="headerlink" title="First impressions"></a>First impressions</h2><p>A while ago I read The <a href="https://amzn.to/2rLlh5o" target="_blank" rel="external">War of Art</a> which seems to be Pressfield’s most famous book. It is highly recommended by <a href="https://simpleprogrammer.com/" target="_blank" rel="external">John Sonmez</a>.<br><a id="more"></a></p>
<p>I thought the book was great although not life changing. It explains how to beat <em>Resistance</em>, this force that prevents us from accomplishing our goals. <a href="https://amzn.to/2HTQsFF" target="_blank" rel="external">Turning Pro</a> is a follow up on the War of Art and I am happy to say that I found it a lot clearer and motivational. This book details how amateur and pro behaviours differ in all sorts of situations and how both deal with life changing decisions. </p>
<p>It is a quick and easy read but the book packs a huge punch. Worth it.</p>
<blockquote>
<p>The Amateur tweets. The Pro works.</p>
</blockquote>
<h2 id="Notes-and-Takeaways"><a href="#Notes-and-Takeaways" class="headerlink" title="Notes and Takeaways"></a>Notes and Takeaways</h2><h3 id="Don’t-be-a-shadow-of-yourself"><a href="#Don’t-be-a-shadow-of-yourself" class="headerlink" title="Don’t be a shadow of yourself"></a>Don’t be a shadow of yourself</h3><p>Simple yet powerful concept. We all have this image of our perfect self associated with a set of goals we need to achieve in order to reach that ideal.</p>
<p>One way we end up not following that path is by behaving like <em>addicts</em>: we get high in order to fool ourselves in believing that we are amazing or in order to numb the pain.</p>
<blockquote>
<p>The addict seeks to escape the pain of being human in one of two ways–by transcending it or by anesthetizing it.</p>
</blockquote>
<p>Addiction (sex, money, getting in trouble, living in the future/past, ..) is simply a distraction and a materialization of <em>Resistance</em>.</p>
<h3 id="We-are-all-scared"><a href="#We-are-all-scared" class="headerlink" title="We are all scared"></a>We are all scared</h3><p>Pressfield then explains how overcoming addiction is in fact overcoming the fear of becoming who we really are. </p>
<p>It is indeed simpler to be a lesser version of ourselves. That way we can give ourselves (and others) the excuse of simply not being ourselves.</p>
<p>It is typical for amateurs to let others define who they are. The key is to stop being afraid of being judged for who we really are.</p>
<h3 id="There-are-many-ways-remedies-to-Amateurism"><a href="#There-are-many-ways-remedies-to-Amateurism" class="headerlink" title="There are many ways remedies to Amateurism"></a>There are many ways remedies to Amateurism</h3><p>Work everyday, focus on the long term and not the quick wins, be patient, make the complex simple, never show off, never be scared of asking for help … </p>
<p>Many more in the book ;)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;First-impressions&quot;&gt;&lt;a href=&quot;#First-impressions&quot; class=&quot;headerlink&quot; title=&quot;First impressions&quot;&gt;&lt;/a&gt;First impressions&lt;/h2&gt;&lt;p&gt;A while ago I read The &lt;a href=&quot;https://amzn.to/2rLlh5o&quot;&gt;War of Art&lt;/a&gt; which seems to be Pressfield’s most famous book. It is highly recommended by &lt;a href=&quot;https://simpleprogrammer.com/&quot;&gt;John Sonmez&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term="Books" scheme="http://www.codeblocq.com/tags/Books/"/>
    
      <category term="Procrastination" scheme="http://www.codeblocq.com/tags/Procrastination/"/>
    
      <category term="Productivity" scheme="http://www.codeblocq.com/tags/Productivity/"/>
    
  </entry>
  
</feed>
